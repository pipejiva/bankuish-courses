import {Getter, inject} from '@loopback/core';
import {DefaultCrudRepository, HasManyRepositoryFactory, repository} from '@loopback/repository';
import {MysqlDataSource} from '../datasources';
import {Course, User, UserCourse, UserCourseRelations} from '../models';
import {CourseRepository} from './course.repository';
import {UserRepository} from './user.repository';

export class UserCourseRepository extends DefaultCrudRepository<
  UserCourse,
  typeof UserCourse.prototype.id,
  UserCourseRelations
> {
  public readonly users: HasManyRepositoryFactory<User, typeof UserCourse.prototype.ID>;

  public readonly courses: HasManyRepositoryFactory<Course, typeof UserCourse.prototype.ID>;

  constructor(
    @inject('datasources.mysql') dataSource: MysqlDataSource, @repository.getter('UserRepository') protected userRepositoryGetter: Getter<UserRepository>, @repository.getter('CourseRepository') protected courseRepositoryGetter: Getter<CourseRepository>
  ) {
    super(UserCourse, dataSource);
    this.users = this.createHasManyRepositoryFactoryFor('users', userRepositoryGetter,);
    this.registerInclusionResolver('users', this.users.inclusionResolver);
    this.courses = this.createHasManyRepositoryFactoryFor('courses', courseRepositoryGetter,);
    this.registerInclusionResolver('courses', this.courses.inclusionResolver);
  }
}
